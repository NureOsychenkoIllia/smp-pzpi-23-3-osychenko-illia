МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра програмної інженерії
Звіт
з лабораторної роботи № 4
з дисципліни: «Скриптові мови програмування»
Виконав:
ст. гр. ПЗПІ-23-3
Осиченко І.О.
Перевірив:
ст. викл. каф. ПІ
Сокорчук І. П.
Харків – 2025

1.1 Історія змін
No Дата Версія звіту Опис змін та виправлень
1 08.06.2025 1.0 Створено розділ «Завдання»
2 08.06.2025 1.0 Створено розділ «Опис виконаної роботи»
3 08.06.2025 1.0 Додано тестування та програмний код

1.2 Завдання
Необхідно розширити веб-застосунок інтернет-магазину з попередньої
лабораторної роботи, додавши функціонал автентифікації та авторизації
користувачів, системи управління профілями з можливістю завантаження фото, а
також інтеграцію з базою даних SQLite для зберігання товарів.
Основні вимоги включають створення модульної архітектури з окремими
файлами шапки та підвалу сайту, реалізацію системи логіна з обмеженням доступу
до захищених сторінок, створення сторінки профілю користувача з валідацією
персональних даних та завантаженням фото. Додатково потрібно замінити файлове
зберігання товарів на базу даних SQLite з відповідними функціями для роботи з нею.
Система авторизації має використовувати PHP сесії для збереження стану
користувача між запитами та забезпечувати перенаправлення неавторизованих
користувачів на сторінку входу. Валідація даних профілю повинна включати
перевірку віку, довжини текстових полів та типів завантажуваних файлів.

1.3 Опис виконаної роботи
1.3.1 Створення модульної архітектури застосунку
Для покращення структури проекту було переорганізовано код у модульну
архітектуру з центральним файлом main.php, який виконує роль контролера для
всіх запитів. Цей файл містить систему маршрутизації, що визначає яку сторінку
відобразити на основі GET-параметра page.
Окремі недублюючі файли header.php та footer.php були створені ще під
час виконання минулої лабораторної роботи, тому це завдання пропускаємо.
Система маршрутизації реалізована через конструкцію switch-case, що
дозволяє легко додавати нові сторінки та централізовано керувати доступом до
них. Кожна сторінка винесена в окремий файл у директорії pages, що покращує
організацію коду та спрощує його підтримку.

1.3.2 Реалізація системи автентифікації та авторизації
Створено файл handlers.php, який містить функції для обробки різних типів
запитів включаючи логіку автентифікації. Функція handleLogin() перевіряє введені
користувачем дані та порівнює їх з попередньо визначеними обліковими записами
у файлі credential.php.
Система використовує PHP сесії для збереження інформації про
авторизованого користувача. При успішній автентифікації в сесію записується логін
користувача та час входу в систему. Функція checkAuthorization() перевіряє права
доступу користувача до захищених сторінок та перенаправляє неавторизованих
користувачів на сторінку входу.
function handleLogin($page) {
if ($page !== 'login') return;
if (isset($_SESSION['user_login'])) {
header('Location: main.php?page=products');
exit;
}
global $error;
$error = '';
$credentials = include 'data/credential.php';
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
$username = isset($_POST['username']) ?
trim($_POST['username']) : '';
$password = isset($_POST['password']) ?
trim($_POST['password']) : '';
if (empty($username) || empty($password)) {
$error = 'Всі поля повинні бути заповнені.';
} elseif (isset($credentials[$username]) &&
$credentials[$username] === $password) {
$_SESSION['user_login'] = $username;
$_SESSION['login_time'] = date('Y-m-d H:i:s');
header('Location: main.php?page=products');
exit;
} else {
$error = 'Неправильне ім\'я користувача або пароль.';
}
}
}
Створено сторінку unauthorized.php, яка відображається користувачам без
відповідних прав доступу. Ця сторінка інформує про необхідність авторизації та
надає посилання на сторінку входу.

1.3.3 Створення системи управління профілями
Реалізовано сторінку профілю користувача з можливістю редагування персональної
інформації та завантаження фото. Функція setProfile() виконує валідацію
введених даних за кількома критеріями включаючи перевірку імені та прізвища на
наявність літер, валідацію віку та довжини опису.
Система завантаження файлів використовує суперглобальний масив $_FILES
для обробки завантажених зображень. Перевіряється тип файлу для забезпечення
завантаження лише підтримуваних форматів зображень (JPEG, PNG, GIF).
Завантажені файли зберігаються в директорії uploads з унікальними іменами для
уникнення конфліктів.
if (isset($_FILES['photo']) && $_FILES['photo']['error'] ==
UPLOAD_ERR_OK) {
$allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
$fileType = $_FILES['photo']['type'];
if (!in_array($fileType, $allowedTypes)) {
$errors[] = "Дозволені тільки файли типу JPEG, PNG, GIF.";
} else {
$uploadDir = 'uploads/';
if (!file_exists($uploadDir)) {
mkdir($uploadDir, 0777, true);
}
$fileName = uniqid() . '_' . $_FILES['photo']['name'];
$uploadPath = $uploadDir . $fileName;
if (move_uploaded_file($_FILES['photo']['tmp_name'],
$uploadPath)) {
$uploadedFile = $fileName;
} else {
$errors[] = "Помилка завантаження файлу.";
}
}
}
Валідація даних включає перевірку мінімального віку користувача (16 років),
довжини опису (не менше 50 символів) та обов'язковості всіх полів форми.
Використання регулярних виразів з підтримкою Unicode забезпечує коректну
обробку імен різними мовами.

1.3.4 Інтеграція з базою даних SQLite
Створено файл database.php для роботи з базою даних SQLite. Функція
initDatabase() створює базу даних та таблицю товарів при першому запуску
застосунку. Використання PDO забезпечує безпечну роботу з базою даних та захист
від SQL-ін'єкцій.
База даних автоматично наповнюється початковими товарами при створенні.
Функція getProducts() використовує статичне кешування для оптимізації запитів
до бази даних, завантажуючи дані лише при першому виклику.
function initDatabase() {
$dbPath = 'data/shop.db';
if (!file_exists('data')) {
mkdir('data', 0777, true);
}
try {
$pdo = new PDO('sqlite:' . $dbPath);
$pdo->setAttribute(PDO::ATTR_ERRMODE,
PDO::ERRMODE_EXCEPTION);
$sql = "CREATE TABLE IF NOT EXISTS products (
id INTEGER PRIMARY KEY,
name TEXT NOT NULL,
price REAL NOT NULL
)";
$pdo->exec($sql);
// Наповнення початковими даними
$stmt = $pdo->query("SELECT COUNT(*) as count FROM
products");
$result = $stmt->fetch(PDO::FETCH_ASSOC);
if ($result['count'] == 0) {
$products = [
[1, "Молоко пастеризоване", 12],
[2, "Хліб чорний", 9],
// ... інші товари
];
$stmt = $pdo->prepare("INSERT INTO products (id, name,
price) VALUES (?,?,?)");
foreach ($products as $product) {
$stmt->execute($product);
}
}
return $pdo;
} catch (PDOException $e) {
die('Помилка бази даних: ' . $e->getMessage());
}
}
Структура бази даних включає таблицю products з полями id, name та price.
Використання INTEGER PRIMARY KEY для поля id забезпечує автоматичне
інкрементування ідентифікаторів товарів.

1.3.5 Удосконалення функціоналу кошика
Оновлено функції роботи з кошиком для інтеграції з новою системою авторизації.
Функція handleCart() перевіряє права доступу користувача перед виконанням
будь-яких операцій з кошиком. Додано обробку оплати з відображенням сторінки
підтвердження та автоматичним очищенням кошика.
Функція showPaymentSuccess() генерує окрему HTML-сторінку з
інформацією про успішну оплату та сумою транзакції. Використання
number_format() забезпечує коректне форматування грошових сум з розділенням
тисяч.
Розширено функціонал відображення чека з додаванням кнопок для
видалення окремих товарів та покращеним форматуванням таблиці. Функції
getReceiptMain() та getReceipt() адаптовані для роботи з різними сторінками
застосунку.

1.3.6 Створення сторінок застосунку
Створено окремі файли для кожної сторінки застосунку в директорії pages.
Сторінка login.php містить форму автентифікації з полями для введення логіна та
пароля, а також відображення помилок валідації.
Сторінка profile.php реалізує форму редагування профілю з полями
для імені, прізвища, дати народження, опису та завантаження фото. Форма
використовує enctype="multipart/form-data" для підтримки завантаження файлів.
Сторінка products.php відображає список товарів з можливістю додавання до
кошика. Сторінка cart.php показує вміст кошика з можливістю видалення товарів
та оформлення замовлення.

1.3.7 Створення системи виходу з застосунку
Реалізовано файл logout.php для коректного завершення сесії користувача. Скрипт
очищує всі дані сесії, видаляє session cookie та перенаправляє користувача на
сторінку входу.
$_SESSION = [];
if (ini_get("session.use_cookies")) {
$params = session_get_cookie_params();
setcookie(session_name(), '', time() - 1,
$params["path"], $params["domain"],
$params["secure"], $params["httponly"]
);
}
session_destroy();
header('Location: main.php?page=login');
Використання правильної послідовності операцій забезпечує повне очищення
даних сесії як на сервері, так і в браузері користувача.

1.3.8 Тестування веб-застосунку
Проведено тестування всіх компонентів системи включаючи процес автентифікації,
управління профілем та роботу з кошиком. Перевірено коректність валідації даних
форм, обмеження доступу до захищених сторінок та функціонал завантаження
файлів.
Тестування базі даних включало перевірку створення таблиць, наповнення
початковими даними та коректність запитів для отримання товарів. Перевірено
роботу системи при відсутності бази даних та автоматичне створення необхідних
директорій.

Висновок
У ході виконання лабораторної роботи було успішно розширено веб-застосунок
інтернет-магазину функціоналом автентифікації та авторизації користувачів.
Реалізована модульна архітектура значно покращила організацію коду та спростила
його підтримку.
Створена система управління профілями користувачів з можливістю
завантаження фото демонструє практичне застосування роботи з файлами в PHP.
Інтеграція з базою даних SQLite замінила файлове зберігання товарів на більш
надійне та ефективне рішення.
Застосунок повністю відповідає вимогам безпеки з належною валідацією
введених даних та захистом від основних типів атак. Реалізована система сесій
забезпечує збереження стану користувача між запитами та коректне управління
правами доступу.

ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/mEsXQV91qL4
Хронологічний опис відеозапису:
00:00 - Основні файли та обробники (main.php, handlers.php)
01:01 – Авторизація та захист сторінок
02:32 – Налаштування та ініціалізація SQLite-бази
04:43 – Отримання з бази і кешування товарів
05:32 – Зміна структури сторінок під нову архітектуру
06:01 – Сторінка логіну та обробка форми
07:22 – Сторінки товарів і профілю користувача
09:12 – Демонстрація роботи веб-застосунку
11:10 – Логіка виходу з акаунту

ДОДАТОК Б
Програмний код
Б.1 Головний файл (main.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/main.php
<?php
session_start();
require_once 'handlers.php';
$page = isset($_GET['page']) ? $_GET['page'] : 'products';
handleLogin($page);
handleProducts($page);
handleCart($page);
handleProfile($page);
$page = checkAuthorization($page);
include 'header.php';
switch ($page) {
case "cart":
require_once("pages/cart.php");
break;
case "profile":
require_once("pages/profile.php");
break;
case "products":
require_once("pages/products.php");
break;
case "login":
include("pages/login.php");
break;
case "login_required":
require_once("unauthorized.php");
break;
default:
require_once("unauthorized.php");
break;
}
include 'footer.php';
?>

Б.2 Обробники запитів (handlers.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/handlers.php
<?php
function handleLogin($page) {
if ($page !== 'login') return;
if (isset($_SESSION['user_login'])) {
header('Location: main.php?page=products');
exit;
}
global $error;
$error = '';
$credentials = include 'data/credential.php';
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
$username = isset($_POST['username']) ?
trim($_POST['username']) : '';
$password = isset($_POST['password']) ?
trim($_POST['password']) : '';
if (empty($username) || empty($password)) {
$error = 'Всі поля повинні бути заповнені.';
} elseif (isset($credentials[$username]) &&
$credentials[$username] === $password) {
$_SESSION['user_login'] = $username;
$_SESSION['login_time'] = date('Y-m-d H:i:s');
header('Location: main.php?page=products');
exit;
} else {
$error = 'Неправильне ім\'я користувача або пароль.';
}
}
}
function handleProducts($page) {
if ($page !== 'products' || !isset($_GET['action']) ||
$_GET['action'] !== 'add') return;
if (!isset($_SESSION['user_login'])) {
header('Location: main.php?page=login');
exit;
}
if (isset($_POST['addIdInput']) &&
is_numeric($_POST['addIdInput'])) {
require_once 'functions.php';
require_once 'database.php';
$products = getProducts();
$basket = isset($_SESSION['cart']) ? $_SESSION['cart'] : [];
$id = (int)$_POST['addIdInput'];
$addCount = isset($_POST['addCountInput']) &&
$_POST['addCountInput'] > 0 ?
(int)$_POST['addCountInput'] : 1;
if (isset($products[$id])) {
if (isset($basket[$id])) {
$basket[$id]['quantity'] += $addCount;
} else {
$basket[$id] =
[
'name' => $products[$id][0],
'price' => $products[$id][1],
'quantity' => $addCount,
];
}
}
$_SESSION['cart'] = $basket;
header('Location: main.php?page=products');
exit;
}
}
function handleCart($page) {
if ($page !== 'cart') return;
if (!isset($_SESSION['user_login'])) {
header('Location: main.php?page=login');
exit;
}
if (isset($_GET['action'])) {
switch ($_GET['action']) {
case 'remove':
if (isset($_GET['id']) && isset($_SESSION['cart']
[$_GET['id']])) {
unset($_SESSION['cart'][$_GET['id']]);
header('Location: main.php?page=cart');
exit;
break;
case 'clear':
$_SESSION['cart'] = [];
header('Location: main.php?page=cart');
exit;
break;
}
}
if ($_SERVER['REQUEST_METHOD'] === 'POST' &&
isset($_POST['pay'])) {
$totalSum = isset($_SESSION['cart'])
? array_sum(array_map(function($item) { return $item['price']
* $item['quantity']; }, $_SESSION['cart']))
: 0;
$_SESSION['cart'] = [];
showPaymentSuccess($totalSum);
exit;
}
}
function handleProfile($page) {
if ($page !== 'profile') return;
if (!isset($_SESSION['user_login'])) {
header('Location: main.php?page=login');
exit;
}
require_once 'functions.php';
if (!isset($_SESSION['userProfile'])) {
$_SESSION['userProfile'] = [
'name' => null,
'surname' => null,
'birthdate' => null,
'description' => null,
'photo' => null
];
}
global $userProfile, $profileUpdated;
$userProfile = $_SESSION['userProfile'];
$profileUpdated = setProfile($userProfile);
$_SESSION['userProfile'] = $userProfile;
}
function showPaymentSuccess($totalSum) {
?>
<!DOCTYPE html>
<html lang="uk">
<head>
<meta charset="UTF-8">
<title>Оплата успішна</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<div class="container">
<div class="empty-cart">
<h1>Дякуємо!</h1>
<p>Сплачено: <?php echo number_format($totalSum, 2, '.',
'') ?> грн</p>
<a href="main.php?page=products">Повернутися до покупок</a>
</div>
</div>
</body>
</html>
<?php
}
function checkAuthorization($page)
{
$protectedPages = ['products', 'cart', 'profile'];
if (in_array($page, $protectedPages) && !
isset($_SESSION['user_login'])) {
return 'login_required';
}
return $page;
}
?>

Б.3 Файл функцій (functions.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/functions.php
<?php
function setProfile(&$userProfile)
{
if (isset($_POST['profileSubmit']))
{
$name = isset($_POST['name']) ? trim($_POST['name']) : '';
$surname = isset($_POST['surname']) ?
trim($_POST['surname']) : '';
$birthdate = isset($_POST['birthdate']) ?
trim($_POST['birthdate']) : '';
$description = isset($_POST['description']) ?
trim($_POST['description']) : '';
$errors = [];
if (strlen($name) == 0 || !preg_match('/\p{L}/u', $name)) {
$errors[] = "Ім'я користувача не може бути порожнім і
повинно містити хоча б одну літеру.";
}
if (strlen($surname) == 0 || !preg_match('/\p{L}/u',
$surname)) {
$errors[] = "Прізвище не може бути порожнім і повинно
містити хоча б одну літеру.";
}
if (empty($birthdate)) {
$errors[] = "Дата народження обов'язкова.";
} else {
$birth = DateTime::createFromFormat('Y-m-d', $birthdate);
if (!$birth) {
$errors[] = "Неправильний формат дати народження.";
} else {
$today = new DateTime();
$age = $today->diff($birth)->y;
if ($age < 16) {
$errors[] = "Користувачеві має бути не менше 16
років.";
}
if ($age > 150) {
$errors[] = "Неправдоподібний вік.";
}
}
}
if (strlen($description) < 50) {
$errors[] = "Стисла інформація має містити не менше 50
символів.";
}
$uploadedFile = null;
if (isset($_FILES['photo']) && $_FILES['photo']['error'] ==
UPLOAD_ERR_OK) {
$allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
$fileType = $_FILES['photo']['type'];
if (!in_array($fileType, $allowedTypes)) {
$errors[] = "Дозволені тільки файли типу JPEG, PNG,
GIF.";
} else {
$uploadDir = 'uploads/';
if (!file_exists($uploadDir)) {
mkdir($uploadDir, 0777, true);
}
$fileName = uniqid() . '_' . $_FILES['photo']['name'];
$uploadPath = $uploadDir . $fileName;
if (move_uploaded_file($_FILES['photo']['tmp_name'],
$uploadPath)) {
$uploadedFile = $fileName;
} else {
$errors[] = "Помилка завантаження файлу.";
}
}
} elseif (!isset($userProfile['photo'])) {
$errors[] = "Фото профілю обов'язкове.";
}
if (empty($errors)) {
$userProfile['name'] = $name;
$userProfile['surname'] = $surname;
$userProfile['birthdate'] = $birthdate;
$userProfile['description'] = $description;
if ($uploadedFile) {
$userProfile['photo'] = $uploadedFile;
}
$_SESSION['userProfile'] = $userProfile;
return true;
}
foreach ($errors as $error) {
echo "<div class='error'>$error</div>";
}
}
return false;
}
function showBasket($basket)
{
if (empty($basket)) {
echo "КОШИК ПОРОЖНІЙ\n";
return;
}
echo "<table border='0' cellspacing='0' cellpadding='3'>";
echo "<tr>";
echo "<th>НАЗВА";
echo "</th>";
echo "<th>КІЛЬКІСТЬ</th>";
echo "</tr>";
foreach ($basket as $id => $item) {
echo "<tr>";
echo "<td>" . $item['name'] . "</td>";
echo "<td>" . $item['quantity'] . "</td>";
echo "</tr>";
}
echo "</table>";
}
function showProducts($products)
{
echo "<div class='products-section'>";
echo "<p>Список товарів:</p>";
echo "<table border='0' cellspacing='0' cellpadding='5'>";
echo "<tr>";
echo "<th></th>";
echo "<th>НАЗВА</th>";
echo "<th>ЦІНА</th>";
echo "<th></th>";
echo "</tr>";
$keys = array_keys($products);
for ($i = 0; $i < count($keys); $i++) {
$number = $keys[$i];
$prod = $products[$number];
$name = $prod[0];
$price = $prod[1];
echo "<tr>";
echo "<td>$number</td>";
echo "<td>$name</td>";
$price_str = (string)$price;
echo "<td>$price_str</td>";
echo "<td>";
echo "<form method='POST' action='main.php?
page=products&action=add' class='add-to-cart-form'>";
echo "<input type='hidden' name='addIdInput'
value='$number'>";
echo "<input type='number' name='addCountInput' min='1'
max='99' value='1' class='count-input' placeholder='1'>";
echo "<button type='submit' class='button'>Buy</button>";
echo "</form>";
echo "</td>";
echo "</tr>";
}
echo "</table>";
echo "</div>";
}
function getReceiptMain($basket)
{
if (empty($basket)) {
echo "КОШИК ПОРОЖНІЙ\n";
return;
}
echo "\n<div class='receipt'>";
echo "<h2>Чек:</h2>";
echo "<table border='0' cellspacing='0' cellpadding='5'>";
echo "<tr>";
echo "<th></th>";
echo "<th>НАЗВА</th>";
echo "<th>ЦІНА</th>";
echo "<th>КІЛЬКІСТЬ</th>";
echo "<th>ВАРТІСТЬ</th>";
echo "<th></th>";
echo "</tr>";
$counter = 1;
$total = 0;
foreach ($basket as $id => $item) {
$itemCost = $item['price'] * $item['quantity'];
echo "<tr>";
echo "<td>$counter</td>";
echo "<td>" . $item['name'] . "</td>";
$price_str = (string)$item['price'];
echo "<td>$price_str</td>";
$qty_str = (string)$item['quantity'];
echo "<td>$qty_str</td>";
echo "<td>$itemCost</td>";
echo "<td><a href='main.php?page=cart&action=remove&id=$id'
class='remove-button'></a></td>";
echo "</tr>";
$total += $itemCost;
$counter++;
}
echo "<tr class='total-row'>";
echo "<td colspan='4'>РАЗОМ ДО СПЛАТИ:</td>";
echo "<td>$total</td>";
echo "<td></td>";
echo "</tr>";
echo "</table>";
echo "</div>";
}
?>

Б.4 Робота з базою даних (database.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/database.php
<?php
function initDatabase() {
$dbPath = 'data/shop.db';
if (!file_exists('data')) {
mkdir('data', 0777, true);
}
try {
$pdo = new PDO('sqlite:' . $dbPath);
$pdo->setAttribute(PDO::ATTR_ERRMODE,
PDO::ERRMODE_EXCEPTION);
$sql = "CREATE TABLE IF NOT EXISTS products (
id INTEGER PRIMARY KEY,
name TEXT NOT NULL,
price REAL NOT NULL
)";
$pdo->exec($sql);
$stmt = $pdo->query("SELECT COUNT(*) as count FROM
products");
$result = $stmt->fetch(PDO::FETCH_ASSOC);
if ($result['count'] == 0) {
$products = [
[1, "Молоко пастеризоване", 12],
[2, "Хліб чорний", 9],
[3, "Сир білий", 21],
[4, "Сметана 20%", 25],
[5, "Кефір 1%", 19],
[6, "Вода газована", 18],
[7, 'Печиво "Весна"', 14],
];
$stmt = $pdo->prepare("INSERT INTO products (id, name,
price) VALUES (?,?,?)");
foreach ($products as $product) {
$stmt->execute($product);
}
}
return $pdo;
} catch (PDOException $e) {
die('Помилка бази даних: ' . $e->getMessage());
}
}
function getProducts()
{
static $products = null;
if ($products === null) {
$pdo = initDatabase();
$stmt = $pdo->query("SELECT id, name, price FROM products
ORDER BY id");
$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
$products = [];
foreach ($rows as $row) {
$products[$row['id']] = [$row['name'], $row['price']];
}
}
return $products;
}
?>

Б.5 Шапка сайту (header.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/header.php
<!DOCTYPE html>
<html lang="uk">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-
scale=1.0">
<title>ПРОДОВОЛЬЧИЙ МАГАЗИН "ВЕСНА"</title>
<link rel="stylesheet" href="style.css">
</head>
<body>
<div class="header">
<div class="nav">
<?php if (isset($_SESSION['user_login'])): ?>
<a href="main.php?page=products"> Products</a>
<a href="main.php?page=cart"> Cart</a>
<a href="main.php?page=profile"> Profile</a>
<a href="logout.php"> Logout</a>
<?php else: ?>
<a href="main.php?page=login"> Login</a>
<?php endif; ?>
</div>
</div>
<div class="container">
<div class="shop-header">
<h1>ПРОДОВОЛЬЧИЙ МАГАЗИН "ВЕСНА"</h1>
<?php
if (isset($_SESSION['user_login'])) {
echo '<div class="user-greeting">Вітаємо, ' .
htmlspecialchars($_SESSION['user_login']) .
'!</div>';
if (isset($_SESSION['userProfile']) &&
$_SESSION['userProfile']['name']) {
echo '<div class="user-greeting">(' .
htmlspecialchars($_SESSION['userProfile']['name']) .
')</div>';
}
}
?>
</div>
</div>

Б.6 Сторінка логіна (pages/login.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/pages/login.php
<div class="container">
<h1>Вхід до системи</h1>
<?php if (!empty($error)): ?>
<div class="error"><?= htmlspecialchars($error) ?></div>
<?php endif; ?>
<form method="POST" action="main.php?page=login" class="profile-
form">
<div class="form-group">
<label for="username">Ім'я користувача:</label>
<input type="text" name="username" id="username"
required>
</div>
<div class="form-group">
<label for="password">Пароль:</label>
<input type="password" name="password" id="password"
required>
</div>
<button type="submit" class="submit-button">Увійти</button>
</form>
<div class="login-info">
<p>Тестові облікові записи:</p>
<p><strong>Test</strong> / 123123</p>
<p><strong>admin</strong> / admin123</p>
<p><strong>user</strong> / password</p>
</div>
</div>

Б.7 Сторінка профілю (pages/profile.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/pages/profile.php
<div class="container">
<h1>Налаштування профілю</h1>
<?php if ($profileUpdated): ?>
<div class="success">
Профіль успішно оновлено!
</div>
<?php endif; ?>
<form method="POST" action="main.php?page=profile"
enctype="multipart/form-data" class="profile-form">
<div class="form-group">
<label for="name">Ім'я: </label>
<input type="text" name="name" id="name" value="<?=
htmlspecialchars($userProfile['name'] ?? '') ?>" required>
</div>
<div class="form-group">
<label for="surname">Прізвище:</label>
<input type="text" name="surname" id="surname" value="<?=
htmlspecialchars($userProfile['surname'] ?? '') ?>" required>
</div>
<div class="form-group">
<label for="birthdate">Дата народження:</label>
<input type="date" name="birthdate" id="birthdate"
value="<?= htmlspecialchars($userProfile['birthdate'] ?? '') ?>"
required>
</div>
<div class="form-group">
<label for="description">Стисла інформація (мінімум 50
символів):</label>
<textarea name="description" id="description" rows="4"
required><?= htmlspecialchars($userProfile['description'] ?? '') ?></
textarea>
</div>
<div class="form-group">
<label for="photo">Фото профілю:</label>
<input type="file" name="photo" id="photo" accept="image/
jpeg,image/png,image/gif">
<?php if (isset($userProfile['photo']) &&
$userProfile['photo']): ?>
<img src="uploads/<?=
htmlspecialchars($userProfile['photo']) ?>" alt="Фото профілю"
class="profile-photo">
<?php endif; ?>
</div>
<button type="submit" name="profileSubmit" class="submit-
button">Зберегти</button>
</form>
<?php if (isset($userProfile['name']) && $userProfile['name']): ?>
<div class="profile-info">
<h3>Поточна інформація профілю:</h3>
<p><strong>Ім'я:</strong> <?=
htmlspecialchars($userProfile['name']) ?></p>
<p><strong>Прізвище:</strong> <?=
htmlspecialchars($userProfile['surname']) ?></p>
<p><strong>Дата народження:</strong> <?=
htmlspecialchars($userProfile['birthdate']) ?></p>
<p><strong>Опис:</strong> <?=
htmlspecialchars($userProfile['description']) ?></p>
</div>
<?php endif; ?>
</div>

Б.8 Файл виходу (logout.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/logout.php
<?php
session_start();
$_SESSION = [];
if (ini_get("session.use_cookies")) {
$params = session_get_cookie_params();
setcookie(session_name(), '', time() - 1,
$params["path"], $params["domain"],
$params["secure"], $params["httponly"]
);
}
session_destroy();
header('Location: main.php?page=login');
?>

Б.9 Дані для автентифікації (data/credential.php)
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Lab4/smp-pzpi-23-3-osychenko-illia-lab4/data/credential.php
<?php
return [
'Test' => '123123',
'admin' => 'admin123',
'user' => 'password'
];
?>