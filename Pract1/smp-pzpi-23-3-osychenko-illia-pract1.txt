МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
Кафедра програмної інженерії

Звіт
з практичної роботи № 1
з дисципліни: «Скриптові мови програмування»

Виконав:
ст. гр. ПЗПІ-23-3
Осиченко І.О.

Перевірив:
ст. викл. каф. ПІ
Сокорчук І. П.

Харків – 2025

1.1 Завдання

Необхідно створити Bash-скрипт для малювання (виведення у командний рядок)
ялинки заданих розмірів. Висота та ширина ялинки передаються як аргументи
командного рядка. Ялинка повинна мати наступні характеристики:
– Висота ялинки повинна бути парною, а ширина - непарною.
– Висота ялинки повинна бути більшою за 7.
– Ширина ялинки повинна дорівнювати висоті - 1.
– Ялинка повинна мати 2 рівні гілок, які чергуються між собою.
– Ялинка повинна мати стовбур, що складається з 2 рядків.
– Ялинка повинна мати сніг, що займає всю ширину ялинки.
– Ялинка повинна бути симетричною.
– Ялинка повинна бути виведена у командний рядок з використанням
символів «*», «, « (пробіл).
– Ялинка повинна бути виведена у командний рядок з використанням
циклів, умовних операторів та функції:
– if … then … fi
– while … do … done
– until … do … done
– for … in .. do … done
– for ((…)); do … done
– у скрипті також потрібно використати створену функцію.

Право редагувати файл скрипта повинен мати лише власник скрипта, а скрипт
повинен бути доступним для виконання для всіх користувачів, тому встановлюємо
наступні права доступу:
– власник: читання, запис, виконання (7)
– група: читання, виконання (5)
– інші: читання, виконання (5)

1.2 Опис виконаної роботи

1.2.1 Створення Bash-скрипту

Створимо відповідний файл скрипта, в якому реалізовуватимо алгоритм малювання
ялинки. Для цього відкриємо термінал та виконуємо команду:
 touch pzpi-23-3-osychenko-illia-task1

Встановимо відповідні права доступу до файлу та зробимо його виконуваним:
 chmod 755 pzpi-23-3-osychenko-illia-task1
 chmod +x pzpi-23-3-osychenko-illia-task1

1.2.2 Створення функцій обробки вводу аргументів командного рядка

Створимо функції обробки аргументів командного рядка, повідомлення про
помилки, форматування рядків та малювання ялинки. Створимо функцію
show_help, яка виводитиме повідомлення з інструкцію по використанні скрипта,
якщо аргументи командного рядка не передані або передані неправильно. Функція
show_help реалізована у наступному коді:
 3 show_help() {
 4 echo "Використання:"
 5 echo " $0 <висота> <ширина> Малювання ялинки заданих
розмірів"
 6 }

Зробимо ввод аргументів командного рядка у змінні height та width та перевірку
наявності аргументів з обробленням та виведенням відповідних повідомлень у
випадку невідповідності умовам:
 89 if [ $# -ne 2 ]; then
 90 show_help
 91 exit 1
 92 fi
 93 
 94 height=$1
 95 width=$2
 96
 97 if [ $height -le 0 ] || [ $width -le 0 ]; then
 98 echo "ПОМИЛКА! Неможливо зобразити ялинку. Обидва аргументи
мають бути додатніми цілими числами." >&2
 99 exit 2
100 fi
101 
102 if show_tree $height $width; then
103 exit 0
104 else
105 echo "ПОМИЛКА! Неможливо зобразити ялинку. Переконайтеся, що
висота > 7 і ширина == висота - 1." >&2
106 exit 3
107 fi

У випадку, якщо висота та ширина ялинки не відповідають умовам, виводимо
повідомлення про помилку. Для цього використаємо умовні оператори:
– Якщо кількість аргументів не дорівнює 2, виводиться довідка про
використання скрипта.
– Якщо висота або ширина менші або дорівнюють нулю, виводиться
повідомлення про неправильні аргументи.
– Якщо висота менша або дорівнює 7, або ширина не дорівнює висоті мінус
1, виводиться повідомлення про невідповідність розмірів умовам.

Відповідні повідомлення виводяться в поток помилок (stderr) за допомогою
оператору >&2.

1.2.3 Створення функції форматування рядка

Створимо функцію format_row, яка форматуватиме рядок з символами ялинки.
Функція прийматиме три параметри: символ, ширину символу та загальну ширину
рядка. Вона обчислюватиме кількість пробілів перед символами, щоб вирівняти
їх по центру, а потім виводитиме відформатований рядок. Функція реалізована у
наступному коді:
 18 format_row() {
 19 local symbol=$1
 20 local symbol_width=$2
 21 local total_width=$3
 22 local spaces=$(((total_width - symbol_width) / 2))
 23 
 24 for ((i = 0; i < spaces; i++)); do
 25 echo -n " "
 26 done
 27 
 28 for ((i = 0; i < symbol_width; i++)); do
 29 echo -n "$symbol"
 30 done
 31 
 32 echo
 33 }

Функція format_row реалізована за допомогою циклу for, який обчислює кількість
пробілів перед символами, щоб вирівняти їх по центру. Вона використовує два
цикли for для виведення пробілів та символів, а також echo (з флагом -n для того,
щоб не виводити новий рядок) для виведення відформатованого рядка.

1.2.4 Створення функції малювання ялинки

Створимо функцію show_tree, яка малюватиме ялинку заданих розмірів. Спочатку
встановимо символ для малювання ялинки, після чого округлимо висоту та ширину
ялинки до парного та непарного чисел відповідно (згідно умови). У випадку
невідповдності отриманих чисел умові, функція поверне код помилки 1, який буде
оброблено у основному коді.
 37 local height=$1
 38 local width=$2
 39 local branch_char="*"
 40 
 41 # округлення (зменшення) до парного числа згідно умови -
if ... then ... fi 
 42 if [ $((height % 2)) -eq 1 ]; then
 43 height=$((height - 1))
 44 fi
 45 
 46 # округлення (зменшення) до непарного числа згідно умови
 47 if [ $((width % 2)) -eq 0 ]; then
 48 width=$((width - 1))
 49 fi
 50 
 51 # мінімально валідні розміри
 52 if [ $height -le 7 ] || [ $width -ne $((height - 1)) ]; then
 53 return 1
 54 fi

Визначимо висоту верхньої частини ялинки, яка буде дорівнювати половині висоти
ялинки мінус 3 (для стовбура). Визначимо також відступ для центру ялинки, який
дорівнює половині ширини ялинки. Виведемо перший рядок ялинки з символом
* за допомогою функції format_row, передавши їй символ, ширину та загальну
ширину рядка. Далі використаємо цикл for для малювання двох рівнів гілок ялинки,
чергуючи символи * та # за допомогою функції cycle_character, яка реалізована
у наступному коді:
 8 cycle_character() {
 9 local current_char=$1
 10 if [ "$current_char" = "*" ]; then
 11 echo "#"
 12 else
 13 echo "*"
 14 fi
 15 }

Функція cycle_character приймає символ як аргумент і повертає інший символ,
чергуючи між * та #. Вона реалізована за допомогою умовного оператора if ...
then ... fi. Потім малюємо стовбур ялинки за допомогою циклу while, який
виводить символ # двічі. Нарешті, малюємо сніг за допомогою циклу until, який
заповнює рядок символами * до досягнення ширини ялинки:
 56 local top_half_height=$(((height - 3) / 2))
 57 local center_padding=$((width / 2))
 58 
 59 format_row "$branch_char" 1 $height
 60 
 61 # два рівні гілок - for ... in .. do ... done 
 62 for level in 0 1; do
 63 for ((row = 0; row < top_half_height; row++)); do
 64 branch_char=$(cycle_character "$branch_char")
 65 format_row "$branch_char" $((row * 2 + 3)) $height
 66 done
 67 done
 68 
 69 # малюємо стовбур - while ... do ... done 
 70 local trunk_count=0
 71 while [ $trunk_count -lt 2 ]; do
 72 format_row "#" 3 $height
 73 trunk_count=$((trunk_count + 1))
 74 done
 75 
 76 # малюємо сніг - until ... do ... done 
 77 snow=""
 78 i=0
 79 until [ $i -ge $width ]; do
 80 snow+="*"
 81 i=$((i + 1))
 82 done
 83 echo "$snow"
 84 
 85 return 0
 86 }

Після успішної відмальовки ялинки повертаємо код 0 та виходимо з програми
за допомогою команди exit 0, сигналізуючи, що виконання скрипта завершено
успішно.

1.2.5 Тестування програми

Запустимо скрипт з аргументами, які відповідають умовам задачі:
 ./pzpi-23-3-osychenko-illia-task1 10 9

Отримуємо наступний результат:
 *
 ###
 *****
 #######
 ***
 #####
 *******
 ###
 ###
*********

Результат збігається з очікуваним. Тепер протестуємо скрипт з аргументами, які не
відповідають умовам задачі:
 ./pzpi-23-3-osychenko-illia-task1 5 4

Отримуємо наступний результат:
 ПОМИЛКА! Неможливо зобразити ялинку. Переконайтеся, що висота > 7 і
ширина == висота - 1.

Скрипт виводить відповідне повідомлення про помилку в поток помилок, що
свідчить про його коректну роботу. Тепер протестуємо скрипт з аргументами, які не
є додатніми числами:
 ./pzpi-23-3-osychenko-illia-task1 -10 -9

Отримуємо наступний результат:
 ПОМИЛКА! Неможливо зобразити ялинку. Обидва аргументи мають бути
додатніми цілими числами.

Скрипт виводить відповідне повідомлення про помилку в поток помилок, що
свідчить про його коректну роботу. Всі умови задачі виконано, скрипт працює
коректно.

Висновок

У ході виконання завдання було розроблено Bash-скрипт для малювання ялинки
у командному рядку відповідно до заданих вимог. Скрипт реалізує перевірку
аргументів, обробку помилок, форматування рядків, малювання гілок, стовбура та
снігу із використанням різних типів циклів і умовних операторів, а також власних
функцій. Проведене тестування підтвердило коректність роботи програми для
валідних та невалідних вхідних даних. Усі умови задачі виконано, скрипт працює
згідно наданих вимог й існуючого прикладу та є доступним для користувача на
віддаленому сервері.

ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/
UPiBkc-eviI
Хронологічний опис відеозапису:
00:05 – Вступ
00:22 – Допоміжні функції
01:20 – Основна функція ялинки
02:27 – Малювання та сніг
03:35 – Логіка запуску та тестування

ДОДАТОК Б
Програмний код
Скрипт для малювання ялинки
GitHub репозиторій: https://github.com/NureOsychenkoIllia/smp-pzpi-23-3-osychenko-illia/blob/main/Pract1/smp-pzpi-23-3-osychenko-illia-pract1/smp-pzpi-23-3-osychenko-illia-pract1-code

 1 #!/bin/bash
 2 
 3 show_help() {
 4 echo "Використання:"
 5 echo " $0 <висота> <ширина> Малювання ялинки заданих
розмірів"
 6 }
 7 
 8 cycle_character() {
 9 local current_char=$1
 10 if [ "$current_char" = "*" ]; then
 11 echo "#"
 12 else
 13 echo "*"
 14 fi
 15 }
 16 
 17 # Функція для форматування рядка - for ((...)); do ... done 
 18 format_row() {
 19 local symbol=$1
 20 local symbol_width=$2
 21 local total_width=$3
 22 local spaces=$(((total_width - symbol_width) / 2))
 23 
 24 for ((i = 0; i < spaces; i++)); do
 25 echo -n " "
 26 done
 27 
 28 for ((i = 0; i < symbol_width; i++)); do
 29 echo -n "$symbol"
 30 done
 31 
 32 echo
 33 }
 34 
 35 # Функція малювання ялинки
 36 show_tree() {
 37 local height=$1
 38 local width=$2
 39 local branch_char="*"
 40 
 41 # округлення (зменшення) до парного числа згідно умови -
if ... then ... fi 
 42 if [ $((height % 2)) -eq 1 ]; then
 43 height=$((height - 1))
 44 fi
 45 
 46 # округлення (зменшення) до непарного числа згідно умови
 47 if [ $((width % 2)) -eq 0 ]; then
 48 width=$((width - 1))
 49 fi
 50 
 51 # мінімально валідні розміри
 52 if [ $height -le 7 ] || [ $width -ne $((height - 1)) ]; then
 53 return 1
 54 fi
 55 
 56 local top_half_height=$(((height - 3) / 2))
 57 local center_padding=$((width / 2))
 58 
 59 format_row "$branch_char" 1 $height
 60 
 61 # два рівні гілок - for ... in .. do ... done 
 62 for level in 0 1; do
 63 for ((row = 0; row < top_half_height; row++)); do
 64 branch_char=$(cycle_character "$branch_char")
 65 format_row "$branch_char" $((row * 2 + 3)) $height
 66 done
 67 done
 68 
 69 # малюємо стовбур - while ... do ... done 
 70 local trunk_count=0
 71 while [ $trunk_count -lt 2 ]; do
 72 format_row "#" 3 $height
 73 trunk_count=$((trunk_count + 1))
 74 done
 75 
 76 # малюємо сніг - until ... do ... done 
 77 snow=""
 78 i=0
 79 until [ $i -ge $width ]; do
 80 snow+="*"
 81 i=$((i + 1))
 82 done
 83 echo "$snow"
 84 
 85 return 0
 86 }
 87 
 88 # перевірка наявності аргументів
 89 if [ $# -ne 2 ]; then
 90 show_help
 91 exit 1
 92 fi
 93 
 94 height=$1
 95 width=$2
 96 
 97 if [ $height -le 0 ] || [ $width -le 0 ]; then
 98 echo "ПОМИЛКА! Неможливо зобразити ялинку. Обидва аргументи
мають бути додатніми цілими числами." >&2
 99 exit 2
100 fi
101 
102 if show_tree $height $width; then
103 exit 0
104 else
105 echo "ПОМИЛКА! Неможливо зобразити ялинку. Переконайтеся, що
висота > 7 і ширина == висота - 1." >&2
106 exit 3
107 fi